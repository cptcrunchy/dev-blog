---
import { navBarConfig, siteConfig } from '@/config'
import type { LinkPreset, NavBarLink } from '@/types/config'
import { url } from '@utils/url-utils'
import { Icon } from 'astro-icon/components'
import { LinkPresets } from '../constants/link-presets'
import LightDarkSwitch from './LightDarkSwitch.svelte'
import DisplaySettings from './widget/DisplaySettings.svelte'
import NavMenuPanel from './widget/NavMenuPanel.astro'

let links: NavBarLink[] = navBarConfig.links.map(
  (item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === 'number') {
      return LinkPresets[item]
    }
    return item
  },
)
---
<div id="top-row" class="col-span-2 grid-rows-1 z-50 onload-animation">
	<div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition" /> <!-- used for onload animation -->
	<div class="card-base sticky top-0 overflow-visible max-w-[var(--page-width)] h-[4.5rem] rounded-t-none mx-auto flex items-center justify-between px-4"]}>
			<a href={url('/')} class="btn-plain h-[3.25rem] px-5 font-bold rounded-lg active:scale-95">
					<div class="flex flex-row text-[var(--primary)] items-center text-md">
							<Icon name="material-symbols:home-outline-rounded" size={20} class="mb-1 mr-2" />
							{siteConfig.title}
					</div>
			</a>
			<div class="hidden md:flex">
					{links.map((l) => {
							return <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
												class="btn-plain h-11 font-bold px-5 rounded-lg active:scale-95"
							>
									<div class="flex items-center">
											{l.name}
											{l.external && <Icon size={14} name="fa6-solid:arrow-up-right-from-square" class="transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
									</div>
							</a>;
					})}
			</div>
			<div class="flex">
					{!siteConfig.themeColor.fixed && (
							<button aria-label="Display Settings" class="btn-plain h-11 w-11 rounded-lg active:scale-90" id="display-settings-switch">
									<Icon name="material-symbols:palette-outline" size={16}></Icon>
							</button>
					)}
					<LightDarkSwitch client:load></LightDarkSwitch>
					<button aria-label="Menu" name="Nav Menu" class="btn-plain w-11 h-11 rounded-lg active:scale-90 md:hidden" id="nav-menu-switch">
							<Icon name="material-symbols:menu-rounded" size={16}></Icon>
					</button>
			</div>
			<NavMenuPanel links={links} />
			<DisplaySettings client:only="svelte">
					<Icon slot="restore-icon" name="fa6-solid:arrow-rotate-left" size={12} />
			</DisplaySettings>
	</div>
</div>
<style lang="stylus">
</style>

<script>

function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch")!;
    switchBtn.addEventListener("click", function () {
        switchTheme()
    });

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.addEventListener("click", function () {
            let settingPanel = document.getElementById("display-setting")!;
            settingPanel.classList.toggle("float-panel-closed");
        });
    }

    let menuBtn = document.getElementById("nav-menu-switch")!;
    menuBtn.addEventListener("click", function () {
        let menuPanel = document.getElementById("nav-menu-panel")!;
        menuPanel.classList.toggle("float-panel-closed");
    });
}

loadButtonScript();

document.addEventListener('astro:after-swap', () => {
    loadButtonScript();
}, { once: false });
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    const pagefind = await import(scriptUrl)
    await pagefind.options({
        'excerptLength': 20
    })
    pagefind.init()
    window.pagefind = pagefind
    pagefind.search('')     // speed up the first search
}
loadPagefind()
</script>}